{"ast":null,"code":"var _jsxFileName = \"/home/basselfa/todo-frontend/src/components/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport TaskPage from './TaskPage';\nimport TaskForm from './TaskForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tasks, setTasks] = useState([\n  // Beispielhafte Tasks zur Demo\n  {\n    id: 1,\n    text: 'Erste Aufgabe',\n    finishingDate: '2023-12-31',\n    completed: false\n  }, {\n    id: 2,\n    text: 'Zweite Aufgabe',\n    finishingDate: '2024-01-15',\n    completed: false\n  }]);\n  // Update-Handler mit Debugging-Ausgaben\n  const handleUpdateTask = async updatedTask => {\n    console.log('handleUpdateTask aufgerufen:', updatedTask);\n    try {\n      const response = await fetch(`/api/tasks/${updatedTask.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedTask)\n      });\n      if (!response.ok) {\n        console.error('Update fehlgeschlagen:', response.statusText);\n        throw new Error(`Update fehlgeschlagen: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Update erfolgreich. Antwort vom Backend:', data);\n      // Aktualisiere den lokalen State\n      setTasks(prevTasks => prevTasks.map(task => task.id === data.id ? data : task));\n    } catch (error) {\n      console.error('Fehler beim Aktualisieren des Tasks:', error);\n    }\n  };\n  // Beispielhafter Add-Handler (hier Dummy-Code)\n  const handleAddTask = async newTask => {\n    console.log('handleAddTask aufgerufen:', newTask);\n    try {\n      const response = await fetch('/api/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTask)\n      });\n      if (!response.ok) {\n        console.error('Hinzufügen fehlgeschlagen:', response.statusText);\n        throw new Error(`Hinzufügen fehlgeschlagen: ${response.status}`);\n      }\n      const createdTask = await response.json();\n      setTasks(prevTasks => [...prevTasks, createdTask]);\n    } catch (error) {\n      console.error('Fehler beim Hinzufügen der Task:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todo List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n        onAddTask: handleAddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/tasks\",\n          children: /*#__PURE__*/_jsxDEV(TaskPage, {\n            tasks: tasks,\n            onUpdateTask: handleUpdateTask\n            // Bei Bedarf weitere Handler wie onDeleteTask hier einfügen\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"tJ03K8gO1llJq4Ydp9+3/qJ/vEs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Switch","Route","TaskPage","TaskForm","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","id","text","finishingDate","completed","handleUpdateTask","updatedTask","console","log","response","fetch","method","headers","body","JSON","stringify","ok","error","statusText","Error","status","data","json","prevTasks","map","task","handleAddTask","newTask","createdTask","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onAddTask","path","onUpdateTask","_c","$RefreshReg$"],"sources":["/home/basselfa/todo-frontend/src/components/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport TaskPage from './TaskPage';\nimport TaskForm from './TaskForm';\nconst App = () => {\n  const [tasks, setTasks] = useState([\n    // Beispielhafte Tasks zur Demo\n    { id: 1, text: 'Erste Aufgabe', finishingDate: '2023-12-31', completed: false },\n    { id: 2, text: 'Zweite Aufgabe', finishingDate: '2024-01-15', completed: false }\n  ]);\n  // Update-Handler mit Debugging-Ausgaben\n  const handleUpdateTask = async (updatedTask) => {\n    console.log('handleUpdateTask aufgerufen:', updatedTask);\n    try {\n      const response = await fetch(`/api/tasks/${updatedTask.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedTask)\n      });\n      if (!response.ok) {\n        console.error('Update fehlgeschlagen:', response.statusText);\n        throw new Error(`Update fehlgeschlagen: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Update erfolgreich. Antwort vom Backend:', data);\n      // Aktualisiere den lokalen State\n      setTasks((prevTasks) =>\n        prevTasks.map((task) => (task.id === data.id ? data : task))\n      );\n    } catch (error) {\n      console.error('Fehler beim Aktualisieren des Tasks:', error);\n    }\n  };\n  // Beispielhafter Add-Handler (hier Dummy-Code)\n  const handleAddTask = async (newTask) => {\n    console.log('handleAddTask aufgerufen:', newTask);\n    try {\n      const response = await fetch('/api/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTask)\n      });\n      if (!response.ok) {\n        console.error('Hinzufügen fehlgeschlagen:', response.statusText);\n        throw new Error(`Hinzufügen fehlgeschlagen: ${response.status}`);\n      }\n      const createdTask = await response.json();\n      setTasks((prevTasks) => [...prevTasks, createdTask]);\n    } catch (error) {\n      console.error('Fehler beim Hinzufügen der Task:', error);\n    }\n  };\n  return (\n    <Router>\n      <div className=\"App\">\n        <h1>Todo List</h1>\n        \n        {/* TaskForm zum Erstellen neuer Tasks */}\n        <TaskForm onAddTask={handleAddTask} />\n        <Switch>\n          <Route path=\"/tasks\">\n            <TaskPage\n              tasks={tasks}\n              onUpdateTask={handleUpdateTask}\n              // Bei Bedarf weitere Handler wie onDeleteTask hier einfügen\n            />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}