name: AWS Simple Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./todo-frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './todo-frontend/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build
      run: npm run build
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to S3
      run: |
        aws s3 sync build/ s3://${{ secrets.AWS_S3_BUCKET }} --delete
        
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  deploy-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./todo-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Generate deployment package
      run: |
        mkdir -p deployment
        cp target/*.jar deployment/application.jar
        cp -r .ebextensions deployment/ || true
        cp -r .platform deployment/ || true
        cd deployment && zip -r deployment.zip .
        
    - name: Deploy to Elastic Beanstalk
      run: |
        aws s3 cp deployment/deployment.zip s3://${{ secrets.AWS_S3_BUCKET_BACKEND }}/deployment.zip
        aws elasticbeanstalk create-application-version \
          --application-name todo-app \
          --version-label "ver-${{ github.sha }}" \
          --source-bundle S3Bucket="${{ secrets.AWS_S3_BUCKET_BACKEND }}",S3Key="deployment.zip"
        aws elasticbeanstalk update-environment \
          --environment-name todo-app-env \
          --version-label "ver-${{ github.sha }}"