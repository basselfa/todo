name: Deploy Backend to AWS Elastic Beanstalk

on:
  push:
    branches: [ main ]
    paths:
      - 'todo-backend/**'
      - '.github/workflows/aws-backend-deploy.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-deploy-backend:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'maven'
          
      - name: Build with Maven
        run: |
          cd todo-backend
          ./mvnw clean package -DskipTests
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Generate deployment package
        run: |
          mkdir -p deployment-package
          cp todo-backend/target/*.jar deployment-package/application.jar
          cp -r scripts deployment-package/
          cp appspec.yml deployment-package/
          cd deployment-package
          zip -r ../deploy.zip *
        
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.AWS_EB_APPLICATION_NAME }}
          environment_name: ${{ secrets.AWS_EB_ENVIRONMENT_NAME }}
          version_label: "backend-${{ github.run_number }}-${{ github.sha }}"
          region: ${{ secrets.AWS_REGION }}
          deployment_package: deploy.zip
          wait_for_environment_recovery: 300
          
      - name: Post-deployment verification
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30
          HEALTH_STATUS=$(aws elasticbeanstalk describe-environment-health --environment-name ${{ secrets.AWS_EB_ENVIRONMENT_NAME }} --attribute-names HealthStatus --query "HealthStatus" --output text)
          echo "Environment health status: $HEALTH_STATUS"
          if [ "$HEALTH_STATUS" != "Ok" ]; then
            echo "Warning: Environment health is not optimal. Check AWS console for details."
          else
            echo "Backend deployment successful!"
          fi